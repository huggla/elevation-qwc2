# Copyright 2018, Henrik Uggla
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

from gunicorn.app.base import Application, Config
import gunicorn
import sys
import operator
from gunicorn import glogging
from gunicorn.workers import sync

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --> 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total

del sys.argv[0]
options = {}
for arg in sys.argv:
	keyword, sep, value = arg.partition('=')
	options = dict(options, **{keyword: value.strip('"')})

class GUnicornFlaskApplication(Application):
    def __init__(self, app):
        self.usage, self.callable, self.prog, self.app = None, None, None, app

    def run(self, **options):
        self.cfg = Config()
        [self.cfg.set(key, value) for key, value in options.items()]
        return Application.run(self)

    load = lambda self:self.app

if __name__ == "__main__":
    gunicorn_app = GUnicornFlaskApplication(app)
gunicorn_app.run(**options)
